{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rohit\\\\OneDrive\\\\Desktop\\\\SE project\\\\NEWS\\\\client\\\\src\\\\pages\\\\HomePage.js\",\n  _s = $RefreshSig$();\n// src/pages/HomePage.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom'; // Import useParams hook\n\n// Corrected import paths based on your structure\nimport Hero from '../components/common/Hero';\nimport NewsCard from '../components/common/NewsCard';\nimport LoadingSpinner from '../components/common/LoadingSpinner';\n\n// Import component-specific CSS first, then page-specific\nimport '../components/common/Hero.css';\nimport '../components/common/NewsCard.css';\nimport './HomePage.css'; // Styles specific to HomePage layout (GRID)\n\n// List of valid categories accepted by NewsAPI (adjust if needed)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VALID_CATEGORIES = ['business', 'entertainment', 'general', 'health', 'science', 'sports', 'technology'];\nfunction HomePage() {\n  _s();\n  // Get the categoryName parameter from the URL, if it exists\n  const {\n    categoryName\n  } = useParams();\n  const [newsArticles, setNewsArticles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  // State to display the current category title\n  const [displayCategory, setDisplayCategory] = useState('Top Headlines');\n\n  // useEffect now depends on categoryName to re-fetch when it changes\n  useEffect(() => {\n    // Determine the actual category to fetch (and validate it)\n    let fetchCategory = null;\n    if (categoryName) {\n      const lowerCaseCategory = categoryName.toLowerCase();\n      if (VALID_CATEGORIES.includes(lowerCaseCategory)) {\n        fetchCategory = lowerCaseCategory;\n        // Capitalize first letter for display\n        setDisplayCategory(lowerCaseCategory.charAt(0).toUpperCase() + lowerCaseCategory.slice(1));\n      } else {\n        // Handle invalid category in URL\n        setError(`Invalid category: ${categoryName}. Please select a valid category.`);\n        setLoading(false);\n        setNewsArticles([]); // Clear previous articles\n        setDisplayCategory('Invalid Category');\n        return; // Stop fetching\n      }\n    } else {\n      // No category in URL, fetch general top headlines\n      setDisplayCategory('Top Headlines');\n    }\n    const fetchNews = async () => {\n      setLoading(true);\n      setError(null); // Reset error before new fetch\n      setNewsArticles([]); // Clear old articles immediately for better UX\n\n      const apiKey = process.env.REACT_APP_NEWS_API_KEY;\n      if (!apiKey) {\n        setError(\"News API key is missing.\");\n        setLoading(false);\n        return;\n      }\n\n      // Base URL for top headlines in the US\n      let apiUrl = `https://newsapi.org/v2/top-headlines?country=us&pageSize=18&apiKey=${apiKey}`;\n\n      // === Modify API URL based on category ===\n      if (fetchCategory) {\n        apiUrl += `&category=${fetchCategory}`;\n      }\n      // =======================================\n\n      console.log(\"Fetching from API:\", apiUrl); // Log URL for debugging\n\n      try {\n        const response = await fetch(apiUrl);\n        if (!response.ok) {\n          let errorMsg = `HTTP error ${response.status}: Failed to fetch news.`;\n          try {\n            const errorData = await response.json();\n            errorMsg = `API Error (${response.status}): ${errorData.message || 'Check API documentation or key.'}`;\n          } catch (parseError) {}\n          throw new Error(errorMsg);\n        }\n        const data = await response.json();\n        if (data.status === \"ok\" && data.articles) {\n          const validArticles = data.articles.filter(article => article.title && article.url && article.urlToImage);\n          setNewsArticles(validArticles);\n          if (validArticles.length === 0) {\n            setError(fetchCategory ? `No articles found for category: ${displayCategory}.` : \"No articles found.\");\n          }\n        } else if (data.status === \"error\") {\n          setError(`API Error: ${data.message || 'Unknown API error'}`);\n        } else {\n          setError(\"Received unexpected data structure from API.\");\n        }\n      } catch (err) {\n        console.error(\"Fetching news failed:\", err);\n        setError(err.message.includes('Failed to fetch') ? \"Network error: Could not fetch news.\" : err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchNews();\n\n    // This effect should re-run whenever categoryName changes\n  }, [categoryName]); // <--- Add categoryName as a dependency\n\n  // --- Verification Handler (remains the same) ---\n  const handleVerifyClick = articleUrl => {\n    if (!articleUrl) return;\n    console.log(\"Verification requested for article:\", articleUrl);\n    alert(`Verification requested for: ${articleUrl}\\n(Backend call needed)`);\n    // TODO: Implement backend API call for verification\n  };\n\n  // --- Render Logic ---\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textAlign: 'center',\n          margin: '1.5rem 0',\n          color: '#333'\n        },\n        children: displayCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 10\n      }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this), error && !loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: [\"\\u26A0\\uFE0F Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), !loading && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"news-grid-container\",\n        children: newsArticles.length > 0 ? newsArticles.map(article => {\n          var _article$source;\n          return /*#__PURE__*/_jsxDEV(NewsCard, {\n            title: article.title,\n            description: article.description,\n            image: article.urlToImage,\n            url: article.url,\n            source: (_article$source = article.source) === null || _article$source === void 0 ? void 0 : _article$source.name,\n            onVerifyClick: handleVerifyClick\n          }, article.url, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this);\n        }) :\n        /*#__PURE__*/\n        // Show specific message if no articles found *after* loading\n        _jsxDEV(\"p\", {\n          children: \"No news articles available for this category.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"XNEPva5B0f1w2Z3ttNd8CUXkfuM=\", false, function () {\n  return [useParams];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Hero","NewsCard","LoadingSpinner","jsxDEV","_jsxDEV","VALID_CATEGORIES","HomePage","_s","categoryName","newsArticles","setNewsArticles","loading","setLoading","error","setError","displayCategory","setDisplayCategory","fetchCategory","lowerCaseCategory","toLowerCase","includes","charAt","toUpperCase","slice","fetchNews","apiKey","process","env","REACT_APP_NEWS_API_KEY","apiUrl","console","log","response","fetch","ok","errorMsg","status","errorData","json","message","parseError","Error","data","articles","validArticles","filter","article","title","url","urlToImage","length","err","handleVerifyClick","articleUrl","alert","children","className","style","textAlign","margin","color","fileName","_jsxFileName","lineNumber","columnNumber","map","_article$source","description","image","source","name","onVerifyClick","_c","$RefreshReg$"],"sources":["C:/Users/rohit/OneDrive/Desktop/SE project/NEWS/client/src/pages/HomePage.js"],"sourcesContent":["// src/pages/HomePage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'; // Import useParams hook\r\n\r\n// Corrected import paths based on your structure\r\nimport Hero from '../components/common/Hero';\r\nimport NewsCard from '../components/common/NewsCard';\r\nimport LoadingSpinner from '../components/common/LoadingSpinner';\r\n\r\n// Import component-specific CSS first, then page-specific\r\nimport '../components/common/Hero.css';\r\nimport '../components/common/NewsCard.css';\r\nimport './HomePage.css'; // Styles specific to HomePage layout (GRID)\r\n\r\n// List of valid categories accepted by NewsAPI (adjust if needed)\r\nconst VALID_CATEGORIES = ['business', 'entertainment', 'general', 'health', 'science', 'sports', 'technology'];\r\n\r\n\r\nfunction HomePage() {\r\n  // Get the categoryName parameter from the URL, if it exists\r\n  const { categoryName } = useParams();\r\n\r\n  const [newsArticles, setNewsArticles] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  // State to display the current category title\r\n  const [displayCategory, setDisplayCategory] = useState('Top Headlines');\r\n\r\n  // useEffect now depends on categoryName to re-fetch when it changes\r\n  useEffect(() => {\r\n    // Determine the actual category to fetch (and validate it)\r\n    let fetchCategory = null;\r\n    if (categoryName) {\r\n        const lowerCaseCategory = categoryName.toLowerCase();\r\n        if (VALID_CATEGORIES.includes(lowerCaseCategory)) {\r\n            fetchCategory = lowerCaseCategory;\r\n            // Capitalize first letter for display\r\n            setDisplayCategory(lowerCaseCategory.charAt(0).toUpperCase() + lowerCaseCategory.slice(1));\r\n        } else {\r\n            // Handle invalid category in URL\r\n            setError(`Invalid category: ${categoryName}. Please select a valid category.`);\r\n            setLoading(false);\r\n            setNewsArticles([]); // Clear previous articles\r\n            setDisplayCategory('Invalid Category');\r\n            return; // Stop fetching\r\n        }\r\n    } else {\r\n        // No category in URL, fetch general top headlines\r\n        setDisplayCategory('Top Headlines');\r\n    }\r\n\r\n\r\n    const fetchNews = async () => {\r\n      setLoading(true);\r\n      setError(null); // Reset error before new fetch\r\n      setNewsArticles([]); // Clear old articles immediately for better UX\r\n\r\n      const apiKey = process.env.REACT_APP_NEWS_API_KEY;\r\n\r\n      if (!apiKey) {\r\n          setError(\"News API key is missing.\");\r\n          setLoading(false);\r\n          return;\r\n      }\r\n\r\n      // Base URL for top headlines in the US\r\n      let apiUrl = `https://newsapi.org/v2/top-headlines?country=us&pageSize=18&apiKey=${apiKey}`;\r\n\r\n      // === Modify API URL based on category ===\r\n      if (fetchCategory) {\r\n        apiUrl += `&category=${fetchCategory}`;\r\n      }\r\n      // =======================================\r\n\r\n      console.log(\"Fetching from API:\", apiUrl); // Log URL for debugging\r\n\r\n      try {\r\n        const response = await fetch(apiUrl);\r\n        if (!response.ok) {\r\n           let errorMsg = `HTTP error ${response.status}: Failed to fetch news.`;\r\n           try {\r\n             const errorData = await response.json();\r\n             errorMsg = `API Error (${response.status}): ${errorData.message || 'Check API documentation or key.'}`;\r\n           } catch (parseError) {}\r\n           throw new Error(errorMsg);\r\n        }\r\n        const data = await response.json();\r\n\r\n        if (data.status === \"ok\" && data.articles) {\r\n             const validArticles = data.articles.filter(\r\n               article => article.title && article.url && article.urlToImage\r\n             );\r\n             setNewsArticles(validArticles);\r\n             if (validArticles.length === 0) {\r\n                setError(fetchCategory ? `No articles found for category: ${displayCategory}.` : \"No articles found.\");\r\n             }\r\n        } else if (data.status === \"error\") {\r\n             setError(`API Error: ${data.message || 'Unknown API error'}`);\r\n        } else {\r\n           setError(\"Received unexpected data structure from API.\");\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Fetching news failed:\", err);\r\n        setError(err.message.includes('Failed to fetch') ? \"Network error: Could not fetch news.\" : err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchNews();\r\n\r\n    // This effect should re-run whenever categoryName changes\r\n  }, [categoryName]); // <--- Add categoryName as a dependency\r\n\r\n  // --- Verification Handler (remains the same) ---\r\n  const handleVerifyClick = (articleUrl) => {\r\n    if (!articleUrl) return;\r\n    console.log(\"Verification requested for article:\", articleUrl);\r\n    alert(`Verification requested for: ${articleUrl}\\n(Backend call needed)`);\r\n    // TODO: Implement backend API call for verification\r\n  };\r\n\r\n  // --- Render Logic ---\r\n  return (\r\n    <div>\r\n      \r\n\r\n      <div className=\"page-content\">\r\n         {/* Display the current category title */}\r\n         <h2 style={{ textAlign: 'center', margin: '1.5rem 0', color: '#333' }}>\r\n            {displayCategory}\r\n         </h2>\r\n\r\n        {loading && <LoadingSpinner />}\r\n\r\n        {error && !loading && (\r\n          <div className=\"error-message\">⚠️ Error: {error}</div>\r\n        )}\r\n\r\n        {!loading && !error && (\r\n          <div className=\"news-grid-container\">\r\n            {newsArticles.length > 0 ? (\r\n              newsArticles.map((article) => (\r\n                <NewsCard\r\n                  key={article.url}\r\n                  title={article.title}\r\n                  description={article.description}\r\n                  image={article.urlToImage}\r\n                  url={article.url}\r\n                  source={article.source?.name}\r\n                  onVerifyClick={handleVerifyClick}\r\n                />\r\n              ))\r\n            ) : (\r\n              // Show specific message if no articles found *after* loading\r\n              <p>No news articles available for this category.</p>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}